diff --git a/dist/index.js b/dist/index.js
index 974d6b26f626024fc9904908100c9ecaa54f43e1..5d9d92a0796e02630ccdd1174d4fd25e016d2b06 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -6,28 +6,35 @@ import { processError } from '@vitest/utils/error';
 import { util } from 'chai';

 const MATCHERS_OBJECT = Symbol.for("matchers-object");
-const JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object");
+// Patched this symbol for storybook, so that @storybook/test can be used in a jest environment as well.
+// Otherwise, vitest will override global jest matchers, and crash.
+const JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object-storybook");
 const GLOBAL_EXPECT = Symbol.for("expect-global");
 const ASYMMETRIC_MATCHERS_OBJECT = Symbol.for("asymmetric-matchers-object");

 if (!Object.prototype.hasOwnProperty.call(globalThis, MATCHERS_OBJECT)) {
   const globalState = /* @__PURE__ */ new WeakMap();
-  const matchers = /* @__PURE__ */ Object.create(null);
-  const assymetricMatchers = /* @__PURE__ */ Object.create(null);
   Object.defineProperty(globalThis, MATCHERS_OBJECT, {
     get: () => globalState
   });
+}
+if (!Object.prototype.hasOwnProperty.call(globalThis, JEST_MATCHERS_OBJECT)) {
+  const matchers = /* @__PURE__ */ Object.create(null);
   Object.defineProperty(globalThis, JEST_MATCHERS_OBJECT, {
     configurable: true,
     get: () => ({
-      state: globalState.get(globalThis[GLOBAL_EXPECT]),
+      state: globalThis[MATCHERS_OBJECT].get(globalThis[GLOBAL_EXPECT]),
       matchers
     })
   });
+}
+if (!Object.prototype.hasOwnProperty.call(globalThis, ASYMMETRIC_MATCHERS_OBJECT)) {
+  const assymetricMatchers = /* @__PURE__ */ Object.create(null);
   Object.defineProperty(globalThis, ASYMMETRIC_MATCHERS_OBJECT, {
     get: () => assymetricMatchers
   });
 }
+
 function getState(expect) {
   return globalThis[MATCHERS_OBJECT].get(expect);
 }
